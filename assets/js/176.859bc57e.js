(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{898:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://www.helloworld.net/p/4348857633",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("堆内存的上限:")]),t._v(" "),a("p",[t._v("在 Node.js 中，堆内存默认上限在 64 位系统中约为 1.4 GB，在 32 位系统中约为 0.7 GB。"),a("br"),t._v("\n而在 Chrome 浏览器中，每个标签页的内存上限约为 4 GB（64 位系统）和 1 GB（32 位系统）。")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("进程、线程与堆内存:")]),t._v(" "),a("p",[t._v("通常来说，一个进程（Process）只会有一个堆内存，同一进程下的多个线程会共享同一个堆内存。")]),t._v(" "),a("p",[t._v("在 Chrome 浏览器中，一般情况下每个标签页都有单独的进程，不过在某些情况下也会出现多个标签页共享一个进程的情况。")])]),a("h3",{attrs:{id:"存储变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储变量"}},[t._v("#")]),t._v(" 存储变量")]),t._v(" "),a("p",[t._v("原始类型的变量是真正地把值储存在栈内存中。")]),t._v(" "),a("p",[t._v("而引用类型的变量只在栈内存中储存一个引用（reference），这个引用指向堆内存里的真正的值")]),t._v(" "),a("p",[t._v("全局变量以及被闭包引用的变量（即使是原始类型）均储存在堆内存中")]),t._v(" "),a("h3",{attrs:{id:"内存不可变与可变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存不可变与可变"}},[t._v("#")]),t._v(" 内存不可变与可变")]),t._v(" "),a("ol",[a("li",[t._v("原始值,就是基础类型")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为11开辟新的内存")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为44开辟新的内存")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为a开辟新的内存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("栈内存中的原始值一旦确定就不能被更改（不可变的）\n2. 对象引用")]),t._v(" "),a("p",[t._v("栈内存中的对象引用是可以被更改的")]),t._v(" "),a("h2",{attrs:{id:"内存生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存生命周期"}},[t._v("#")]),t._v(" 内存生命周期")]),t._v(" "),a("p",[t._v("分配 -> 使用 -> 释放")]),t._v(" "),a("h3",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[t._v("都是堆内存的垃圾回收")]),t._v(" "),a("ol",[a("li",[t._v("标记-清除")])]),t._v(" "),a("p",[t._v("当一个变量进入执行上下文时，它就会被标记为“处于上下文中”；而当变量离开执行上下文时，则会被标记为“已离开上下文”\n2. 标记-整理"),a("br"),t._v("\n标记、整理与清除\n+ 标记:垃圾回收器会从全局对象（根）开始，一层一层往下查询，直到标记完所有活跃的对象，那么剩下的未被标记的对象就是不可达的了\n+ 整理: 垃圾回收器会将活跃的（被标记了的）对象往内存空间的一端移动，这个过程可能会改变内存中的对象的内存地址。\n+ 清除: 垃圾回收器会将边界后面（也就是最后一个活跃的对象后面）的对象清除，并释放它们占用的内存空间。\n3. 引用计数(已经被弃用)\n4. 循环引用")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使 foo 函数已经执行完毕 // 对象 a 和 b 均已离开函数作用域 // 但是 a 和 b 还在互相引用 // 那么它们这辈子都不会被回收了 // Oops！内存泄露了！")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"v8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8"}},[t._v("#")]),t._v(" v8")]),t._v(" "),a("p",[t._v("V8 是目前最流行的 JavaScript 引擎之一，我们熟知的 Chrome 浏览器和 Node.js 等软件都在使用 V8")]),t._v(" "),a("p",[t._v("堆内存分区域主要:")]),t._v(" "),a("ol",[a("li",[t._v("新空间：用于存储新的对象")]),t._v(" "),a("li",[t._v("旧空间：用于存躲过两次垃圾回收的对象")])]),t._v(" "),a("p",[t._v("V8 内部实现了两个垃圾回收器：")]),t._v(" "),a("ol",[a("li",[t._v("Minor GC（副 GC），Minor GC 会频繁地运行")]),t._v(" "),a("li",[t._v("Major GC（主 GC）（标记-整理算法），过会运行")])]),t._v(" "),a("p",[t._v("标记整理算法有可能阻塞进程，就用增量标记，执行一段js在执行一段垃圾回收")]),t._v(" "),a("h2",{attrs:{id:"内存优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存优化"}},[t._v("#")]),t._v(" 内存优化")]),t._v(" "),a("h3",{attrs:{id:"全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),a("p",[t._v("全局变量不会被回收，都能可达，所以要手动置空")]),t._v(" "),a("h3",{attrs:{id:"隐藏类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐藏类"}},[t._v("#")]),t._v(" 隐藏类")]),t._v(" "),a("p",[t._v("对象有相同的属性，属性排序就会生成一样的隐藏类")]),t._v(" "),a("p",[t._v("尽量避免对属性的增删")]),t._v(" "),a("h3",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("h2",{attrs:{id:"如何分析内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何分析内存"}},[t._v("#")]),t._v(" 如何分析内存")]),t._v(" "),a("h3",{attrs:{id:"堆快照"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆快照"}},[t._v("#")]),t._v(" 堆快照")]),t._v(" "),a("ol",[a("li",[t._v("摘要视图"),a("br"),t._v("\n可以看到各种函数，变量等占用内存情况")]),t._v(" "),a("li",[t._v("比较视图"),a("br"),t._v("\n两个快照以上就可以看到比较视图")]),t._v(" "),a("li",[t._v("包含视图")]),t._v(" "),a("li",[t._v("统计视图")])]),t._v(" "),a("h3",{attrs:{id:"分配时间轴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配时间轴"}},[t._v("#")]),t._v(" 分配时间轴")]),t._v(" "),a("p",[t._v("在一段时间内持续地记录内存分配（约每 50 毫秒打一张堆快照），记录完成后可以选择查看任意时间段的内存分配详情")]),t._v(" "),a("h3",{attrs:{id:"分配采样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配采样"}},[t._v("#")]),t._v(" 分配采样")])])}),[],!1,null,null,null);s.default=r.exports}}]);