(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{864:function(t,a,_){"use strict";_.r(a);var v=_(6),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("https://juejin.cn/post/6844903844216832007#heading-10")]),t._v(" "),_("h2",{attrs:{id:"什么事http协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么事http协议"}},[t._v("#")]),t._v(" 什么事HTTP协议")]),t._v(" "),_("ol",[_("li",[t._v("HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。")]),t._v(" "),_("li",[t._v("HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。")]),t._v(" "),_("li",[t._v("HTTP是无状态协议")])]),t._v(" "),_("h2",{attrs:{id:"tcp-ip-协议族"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-协议族"}},[t._v("#")]),t._v(" TCP/IP 协议族")]),t._v(" "),_("h3",{attrs:{id:"应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[t._v("#")]),t._v(" 应用层")]),t._v(" "),_("p",[t._v("应用层规定了向用户提供应用服务时通信的协议")]),t._v(" "),_("ol",[_("li",[t._v("FTP（File Transfer Protocol，文件传输协议）")]),t._v(" "),_("li",[t._v("DNS（Domain Name System，域名系统）")]),t._v(" "),_("li",[t._v("HTTP协议")])]),t._v(" "),_("h3",{attrs:{id:"传输层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),_("p",[t._v("提供处于网络连接中两台计算机之间的数据传输所使用的协议。")]),t._v(" "),_("ol",[_("li",[t._v("TCP，全双工，在建立和断开连接时有三次握手和四次挥手，在传输的过程中更稳定可靠但同时就没UDP那么高效。")]),t._v(" "),_("li",[t._v("UDP 协议不保证有序且不丢失的传递到对端，更加高效和轻便")])]),t._v(" "),_("h3",{attrs:{id:"网络层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),_("p",[t._v("规定了数据通过怎样的传输路线到达对方计算机传送给对方")]),t._v(" "),_("p",[t._v("网络层所起的所用就是在众多的选项内选择一条传输路线")]),t._v(" "),_("h3",{attrs:{id:"链路层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链路层"}},[t._v("#")]),t._v(" 链路层")]),t._v(" "),_("p",[t._v("用来处理连接网络的硬件部分，包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。")]),t._v(" "),_("h3",{attrs:{id:"web应用的通信传输流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#web应用的通信传输流"}},[t._v("#")]),t._v(" web应用的通信传输流")]),t._v(" "),_("p",[t._v("发送端在层与层之间传输数据时，每经过一层时会被打上一个该层所属的首部信息。反之，接收端在层与层之间传输数据时，每经过一层时会把对应的首部信息去除。")]),t._v(" "),_("h2",{attrs:{id:"串型连接、持久连接、管道化持久连接、http-2-0多路复用简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#串型连接、持久连接、管道化持久连接、http-2-0多路复用简介"}},[t._v("#")]),t._v(" 串型连接、持久连接、管道化持久连接、http/2.0多路复用简介")]),t._v(" "),_("ol",[_("li",[t._v("串型连接")]),t._v(" "),_("li",[t._v("持久连接")]),t._v(" "),_("li",[t._v("管道持久化连接")]),t._v(" "),_("li",[t._v("多路复用")]),t._v(" "),_("li",[t._v("websocket")])]),t._v(" "),_("h2",{attrs:{id:"uri"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#uri"}},[t._v("#")]),t._v(" URI")]),t._v(" "),_("ul",[_("li",[t._v("URI(Universal Resource Identifier：统一资源标识符)")]),t._v(" "),_("li",[t._v("URL(Universal Resource Locator：统一资源定位符)")]),t._v(" "),_("li",[t._v("URN(Universal Resource Name：统一资源名称)")])]),t._v(" "),_("p",[t._v("URI是一个资源文件的不同表示方法的总称,uri包括了url，urn")]),t._v(" "),_("h2",{attrs:{id:"http1-0、http1-1-和-http2-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、http1-1-和-http2-0"}},[t._v("#")]),t._v(" HTTP1.0、HTTP1.1 和 HTTP2.0")]),t._v(" "),_("p",[t._v("HTTP 建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器")]),t._v(" "),_("h3",{attrs:{id:"影响http网络请求的因素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#影响http网络请求的因素"}},[t._v("#")]),t._v(" 影响HTTP网络请求的因素")]),t._v(" "),_("ol",[_("li",[t._v("带宽")]),t._v(" "),_("li",[t._v("延迟：")])]),t._v(" "),_("ul",[_("li",[t._v("浏览器阻塞：浏览器对于同一个域名，同时只能有 4 个连接，超过浏览器最大连接数限制，后续请求就会被阻塞。")]),t._v(" "),_("li",[t._v("DNS 查询：将域名解析为 IP")]),t._v(" "),_("li",[t._v("建立连接：tcp连接")])]),t._v(" "),_("h3",{attrs:{id:"http-1-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),_("p",[t._v("最早的http只是使用在一些较为简单的网页上和网络请求上，所以比较简单，每次请求都打开一个新\n的TCP链接，收到响应之后立即断开连接。")]),t._v(" "),_("h3",{attrs:{id:"http1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" HTTP1.1")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("缓存处理")]),t._v(" "),_("p",[t._v("引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略")])]),t._v(" "),_("li",[_("p",[t._v("带宽优化及网络连接的使用")]),t._v(" "),_("p",[t._v("请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206")])]),t._v(" "),_("li",[_("p",[t._v("错误通知的管理")])])]),t._v(" "),_("p",[t._v("新增了24个错误状态响应码")]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[_("p",[t._v("Host头处理"),_("br"),t._v("\n请求消息和响应消息都必须包含Host头部，以区分同一个物理主机中的不同虚拟主机的域名")])]),t._v(" "),_("li",[_("p",[t._v("长连接")]),t._v(" "),_("p",[t._v("默认开启持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。")])])]),t._v(" "),_("h3",{attrs:{id:"http-2-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" HTTP/2.0")]),t._v(" "),_("p",[t._v("帧（frame）和流（stream），理解这两个概念是理解下面多路复用的前提。 帧代表数据传输的最小的单位，每个帧都有序列标识表明该帧属于哪个流，流也就是多个帧组成的数据流，每个流表示一个请求")]),t._v(" "),_("ul",[_("li",[t._v("新的二进制格式")]),t._v(" "),_("li",[t._v("多路复用")]),t._v(" "),_("li",[t._v("头部压缩")]),t._v(" "),_("li",[t._v("服务端推送")])]),t._v(" "),_("h3",{attrs:{id:"http-3-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3-0"}},[t._v("#")]),t._v(" HTTP/3.0")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("避免包阻塞"),_("br")]),t._v(" "),_("p",[t._v("多个流的数据包在TCP连接上传输时，若一个流中的数据包传输出现问题，TCP需要等待该包重传后，才能继续传输其它流的数据包。但在基于UDP的QUIC协议中，不同的流之间的数据传输真正实现了相互独立互不干扰，某个流的数据包在出问题需要重传时，并不会对其他流的数据包传输产生影响。")])]),t._v(" "),_("li",[_("p",[t._v("快速重启会话")])])]),t._v(" "),_("h2",{attrs:{id:"http报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http报文"}},[t._v("#")]),t._v(" HTTP报文")]),t._v(" "),_("h3",{attrs:{id:"请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),_("h3",{attrs:{id:"状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),_("h3",{attrs:{id:"首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#首部字段"}},[t._v("#")]),t._v(" 首部字段")]),t._v(" "),_("h3",{attrs:{id:"两种请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#两种请求"}},[t._v("#")]),t._v(" 两种请求")]),t._v(" "),_("p",[t._v("浏览器发送 CORS 请求（跨域请求）时, 会将请求分为简单请求与复杂请求.")]),t._v(" "),_("ol",[_("li",[t._v("简单请求\n"),_("ul",[_("li",[t._v("请求的方法只能为HEAD、GET、POST")]),t._v(" "),_("li",[t._v("无自定义请求头")]),t._v(" "),_("li",[t._v("Content-Type只能是这几种： text/plain multipart/form-data application/x-www-form-urlencoded")])])]),t._v(" "),_("li",[t._v("复杂请求\n"),_("ul",[_("li",[t._v("PUT, Delete 方法的 ajax 请求")]),t._v(" "),_("li",[t._v("发送 JSON 格式的 ajax 请求(比如post数据)")]),t._v(" "),_("li",[t._v("带自定义头的 ajax 请求")])])])]),t._v(" "),_("p",[t._v("复杂请求在发生请求时, 如果是 CORS 请求，浏览器预先发送一个 option 请求。浏览器这种行为被称之为预检请求")]),t._v(" "),_("h2",{attrs:{id:"web服务器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#web服务器"}},[t._v("#")]),t._v(" WEB服务器")]),t._v(" "),_("h3",{attrs:{id:"虚拟主机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟主机"}},[t._v("#")]),t._v(" 虚拟主机")]),t._v(" "),_("h3",{attrs:{id:"代理服务器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器"}},[t._v("#")]),t._v(" 代理服务器")]),t._v(" "),_("p",[t._v("代理服务器就是客户端和服务端之间的“中间商”，即HTTP请求通过代理服务器转发给服务器，再将服务器的响应返回给客户端的行为。代理服务器可以用来作为缓存服务器，也可以用来隐藏用户身份（正向代理）或者服务器身份（反向代理）增加安全性。")]),t._v(" "),_("ul",[_("li",[t._v("正向代理")]),t._v(" "),_("li",[t._v("反向代理")])]),t._v(" "),_("h3",{attrs:{id:"缓存服务器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存服务器"}},[t._v("#")]),t._v(" 缓存服务器")]),t._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" https")]),t._v(" "),_("h2",{attrs:{id:"web安全防范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#web安全防范"}},[t._v("#")]),t._v(" WEB安全防范")]),t._v(" "),_("h3",{attrs:{id:"xss-攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击"}},[t._v("#")]),t._v(" XSS 攻击")]),t._v(" "),_("h3",{attrs:{id:"csrf-攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[t._v("#")]),t._v(" CSRF 攻击")]),t._v(" "),_("h3",{attrs:{id:"点击劫持"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#点击劫持"}},[t._v("#")]),t._v(" 点击劫持")]),t._v(" "),_("h3",{attrs:{id:"中间人攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),_("h2",{attrs:{id:"状态码-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码-2"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),_("h3",{attrs:{id:"_3xx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3xx"}},[t._v("#")]),t._v(" 3XX")]),t._v(" "),_("p",[t._v("URL 重定向，能够将多个 URL 指向同一个页面。")]),t._v(" "),_("p",[t._v("服务器可以通过返回一个重定向响应来进行重定向。这个重定向响应有一个以 3 开头的状态码 ，并且有一个"),_("code",[t._v("Location")]),t._v("头字段 表示要重定向到的位置。")]),t._v(" "),_("p",[t._v("浏览器接收到这个重定向之后，会立即加载 Location 中指定的 URL。用户基本注意不到这个过程。")]),t._v(" "),_("h4",{attrs:{id:"_1-永久重定向类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-永久重定向类"}},[t._v("#")]),t._v(" 1. 永久重定向类")]),t._v(" "),_("p",[_("code",[t._v("301")]),t._v(" 和 "),_("code",[t._v("308")]),t._v(" 都属于永久重定向。永久重定向意味着原始 URL 不再可用，替换成了一个新的内容。"),_("strong",[t._v("所以搜索引擎、聚合内容阅读器以及其他爬虫识别这两个状态码时，会更新旧 URL 的资源。")])]),t._v(" "),_("p",[_("strong",[t._v("划重点：这个就是永久重定向和临时重定向的区别。")])]),t._v(" "),_("p",[t._v("规范中，301 本来不允许改变请求方法，但是已有的浏览器厂商都使用了 GET 方法进行新的请求。所以创建了 308 用来处理需要使用非 GET 进行重定向的场景。")]),t._v(" "),_("h3",{attrs:{id:"_2-临时重定向"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-临时重定向"}},[t._v("#")]),t._v(" 2. 临时重定向")]),t._v(" "),_("p",[t._v("302/303/307 都属于临时重定向。有时，当原有资源因为一些不可预测的原因而临时无法访问时，可以通过临时重定向的方式将请求转移到另一个地方。搜索引擎和爬虫不应该记住这个临时的连接")]),t._v(" "),_("p",[t._v("302,307和上面的301,308关系差不多")]),t._v(" "),_("h3",{attrs:{id:"_3-特殊重定向类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-特殊重定向类"}},[t._v("#")]),t._v(" 3. 特殊重定向类")]),t._v(" "),_("p",[t._v("300/304/305/306 可以归属到特殊重定向类。这里重点说一下 304，304 是 HTTP 缓存中的一个重要内容，表示资源未修改，相当于将资源重定向到本地缓存")])])}),[],!1,null,null,null);a.default=r.exports}}]);