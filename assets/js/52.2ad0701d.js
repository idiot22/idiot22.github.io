(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{661:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"响应性api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应性api"}},[t._v("#")]),t._v(" 响应性api")]),t._v(" "),a("h3",{attrs:{id:"基础api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础api"}},[t._v("#")]),t._v(" 基础api")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("reactive")]),a("br"),t._v("\n响应式转换是“深层”的——它影响所有嵌套 property"),a("br"),t._v("\nreactive 将解包所有深层的 refs，同时维持 ref 的响应性。"),a("br"),t._v("\n当将 ref 分配给 reactive property 时，ref 将被自动解包")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("重要")]),a("p",[a("strong",[t._v("解包就是一般的被ref包裹的变量访问需要"),a("code",[t._v("变量.value")]),t._v("访问，reactive里有ref变量时，就可以直接变量名访问，不用.value")])]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\ncount "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("readonly")]),a("br"),t._v("\n只读的，被包裹在里边的变量都是只读的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("isProxy")]),a("br"),t._v("\n检查对象是否是由 reactive 或 readonly 创建的 proxy")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("isReactive")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果该代理是 "),a("code",[t._v("readonly")]),t._v(" 创建的，但包裹了由 "),a("code",[t._v("reactive")]),t._v(" 创建的另一个代理，它也会返回 true")])]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stateCopy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("readonly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isReactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stateCopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("code",[t._v("isReadonly")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("toRow")]),a("br"),t._v("\n可以返回 "),a("code",[t._v("reactive")]),t._v(" 或 "),a("code",[t._v("readonly")]),t._v(" 代理的原始对象")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("markRow")]),a("br"),t._v("\n静态变量可以用，使其不会成为proxy对象，提高性能")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("shawllowReactive")]),a("br"),t._v("\n本身是响应式的，嵌套对象里的变量就不是响应式的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("shawllowReadonly")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"refs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refs"}},[t._v("#")]),t._v(" Refs")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("ref")])]),t._v(" "),a("li",[a("p",[t._v("unref"),a("br"),t._v("\n如果参数是一个 ref，则返回内部值，否则返回参数本身")])]),t._v(" "),a("li",[a("p",[t._v("toRef"),a("br"),t._v("\n为源响应式对象上的某个 property 新创建一个 ref")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fooRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("toRefs"),a("br"),t._v("\n将响应式对象转换为普通对象,会将reactive里面的属性都变成ref包裹的，这样就可以解构出来，还能保证响应式")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nbar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stateAsRefs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toRefs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nstateAsRefs 的类型:\n\n{\nfoo: Ref<number>,\nbar: Ref<number>\n}\n*/")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("isRef")])]),t._v(" "),a("li",[a("p",[t._v("customRef\n自定义ref"),a("br"),t._v("\n比如可以自定义一个值赋值间距大于200ms")])]),t._v(" "),a("li",[a("p",[t._v("triggerRef"),a("br"),t._v("\n手动执行与 shallowRef 关联的任何作用 (effect)，比如强制刷新页面")])])]),t._v(" "),a("h3",{attrs:{id:"computed-与-watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed-与-watch"}},[t._v("#")]),t._v(" computed 与 watch")]),t._v(" "),a("ol",[a("li",[t._v("computed")]),t._v(" "),a("li",[t._v("watchEffect")]),t._v(" "),a("li",[t._v("watchPostEffect")]),t._v(" "),a("li",[t._v("watchSyncEffect")]),t._v(" "),a("li",[t._v("watch")])]),t._v(" "),a("h3",{attrs:{id:"effect-作用域-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effect-作用域-api"}},[t._v("#")]),t._v(" Effect 作用域 API")]),t._v(" "),a("p",[t._v("//todo")]),t._v(" "),a("h2",{attrs:{id:"组合式api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合式api"}},[t._v("#")]),t._v(" 组合式api")]),t._v(" "),a("h3",{attrs:{id:"provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" Provide / Inject")]),t._v(" "),a("p",[t._v("这两者只能在使用当前活动实例的 setup() 期间被调用")]),t._v(" "),a("h3",{attrs:{id:"getcurrentinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getcurrentinstance"}},[t._v("#")]),t._v(" getCurrentInstance")]),t._v(" "),a("p",[t._v("可以访问内部组件实例，不推荐在应用中使用"),a("br"),t._v("\n只能在setup和生命钩子中使用"),a("br"),t._v("\n如果需要在外部使用，就需要先获取到实例")])])}),[],!1,null,null,null);s.default=n.exports}}]);